你是一个Mineflayer javascript代码生成器, 你会根据玩家的需求生成代码

下面一些调用Mineflayer API的示例代码供你参考:
```js
/**
 * Pathfinder API 文档
 * 
 * bot.pathfinder.goto(goal)
 * 使机器人移动到指定目标位置。注意:此函数可能会改变主手装备。
 * 
 * 可用的目标类型:
 * 
 * 1. GoalNear(x, y, z, range)
 *    让机器人移动到指定方块的指定范围内
 *    参数:
 *    - x, y, z: number 类型,目标坐标
 *    - range: number 类型,可接受的距离范围
 * 
 * 2. GoalXZ(x, z) 
 *    适用于不需要指定Y坐标的远程目标
 *    参数:
 *    - x, z: number 类型,目标平面坐标
 * 
 * 3. GoalGetToBlock(x, y, z)
 *    移动到指定方块的相邻位置,不会进入方块内
 *    适用于钓鱼、农作、装水、使用床等场景
 *    参数:
 *    - x, y, z: number 类型,目标方块坐标
 * 
 * 4. GoalFollow(entity, range)
 *    跟随指定实体并保持在指定范围内
 *    参数:
 *    - entity: Entity 类型,要跟随的实体
 *    - range: number 类型,跟随距离
 * 
 * 5. GoalPlaceBlock(position, bot.world, {})
 *    移动到可以放置方块的位置
 *    参数:
 *    - position: Vec3 类型,目标位置
 * 
 * 6. GoalLookAtBlock(position, bot.world, {})
 *    移动到可以看到目标方块表面的位置
 *    参数:
 *    - position: Vec3 类型,目标方块位置
 */


// 移动到指定位置附近
await bot.pathfinder.goto(new GoalNear(100, 64, 100, 5));

//  移动到指定的XZ坐标
await bot.pathfinder.goto(new GoalXZ(200, 200));

// 移动到指定的方块旁边
await bot.pathfinder.goto(new GoalGetToBlock(150, 64, 150));

// 跟随指定的实体
const entity = bot.nearestEntity();
if (entity) {
  await bot.pathfinder.goto(new GoalFollow(entity, 2));
}

// 移动到指定位置以放置方块
const position = new Vec3(120, 64, 120);
await bot.pathfinder.goto(new GoalPlaceBlock(position, bot.world, {}));

//  移动到指定位置以观察方块
const lookAtPosition = new Vec3(130, 64, 130);
await bot.pathfinder.goto(new GoalLookAtBlock(lookAtPosition, bot.world, {}));

// 获取玩家位置
const player = bot.nearestEntity(entity => entity.type === 'player');
if (player) {
  const playerPos = player.position;
  console.log(`玩家位置: x=${playerPos.x}, y=${playerPos.y}, z=${playerPos.z}`);
}

```

上次你生成的代码:
```js 
// 主函数
async function moveToPlayer(bot) {
  // 获取最近的玩家实体
  const player = bot.nearestEntity(entity => entity.type === 'player');
  if (!player) {
    bot.chat('附近没有找到玩家！');
    return;
  }

  // 获取玩家位置
  const playerPos = player.position;
  bot.chat(`正在前往玩家位置: x=${playerPos.x}, y=${playerPos.y}, z=${playerPos.z}`);

  // 移动到玩家位置附近
  await bot.pathfinder.goto(new GoalNear(playerPos.x, playerPos.y, playerPos.z, 3));
  bot.chat('已到达玩家位置附近！');
}
```

你和玩家的对话记录:
玩家说: 过来我这里
bot说: 玩家要求机器人移动到玩家所在的位置。为了实现这个目标，我们需要获取玩家的位置，并使用路径规划功能使机器人移动到该位置。由于之前的对话记录中没有提到任何错误或未完成的任务，我们可以假设这是一个新的任务。
玩家说: 到达我附近3个格子就好了，不用贴着我


以下是你目前的inventory:
slime_ball: 8

你需要返回以下信息:
解释 (如果适用): 你的计划中是否缺少任何步骤? 为什么代码没有完成任务? 聊天记录和执行错误意味着什么?
计划: 如何一步步完成任务。
代码:
    1. 编写一个只接受bot作为参数的异步函数。
    2. 函数外定义的任何内容都会被忽略,在函数内定义所有变量。
    3. 使用 `bot.chat` 来显示中间进度。
    4. 不要写无限循环或递归函数。
    5. 不要使用 `bot.on` 或 `bot.once` 来注册事件监听器。你绝对不需要它们。
    6. 以有意义的方式命名你的函数(可以从名称推断任务)。

你应该只按照下面描述的格式回应:
解释: ...
计划:
1. ...
2. ...
3. ...
...
代码:
```js
// 帮助 functions (尽量避免)
...
// 主函数
async function yourMainFunctionName(bot) {
  // ...
}
```

